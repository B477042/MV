//================================================================
// RS_MessageEffects.js
// ---------------------------------------------------------------
// The MIT License
// Copyright (c) 2020 biud436
// ---------------------------------------------------------------
// Free for commercial and non commercial use.
//================================================================
/*:
 * @plugindesc <RS_MessageEffects>
 * @author biud436
 * 
 * @param Default Text Effect
 * @type select
 * @desc Select desired text effect.
 * @default normal_rot
 * @option Ping Pong
 * @value pingpong
 * @option Slide
 * @value slide
 * @option high_rot
 * @value high_rot
 * @option normal_rot
 * @value normal_rot
 * @option random_rot
 * @value random_rot
 * @option None
 * @value none
 * 
 * @param New Page
 * 
 * @param Clear Flag
 * @parent New Page
 * @type boolean
 * @desc Clear the text effect as 'none' when opening a new page
 * @default false
 * @on true
 * @off false
 *          
 * @help
 * This help document does not support English translation yet.
 * This plugin is also incompatible with the YEP_MessageCore plugin.
 * 
 * ================================================================
 * 소개
 * ================================================================
 * 이 플러그인은 한글 메시지 시스템 플러그인과 호환됩니다.
 * 따로 부가 플러그인으로 내놓는 이유는 성능적 저하가 심하기 때문입니다.
 * 메인 플러그인에 이런 텍스트 기능을 넣게 되면 심각한 성능 저하가 올 수 있습니다.
 * 
 * 또한 Visual Novel Maker의 Design Pattern과 유사하게 상속 방식으로 개발하였습니다.
 * 따라서 이 플러그인은 RPG Maker MV v1.6.2 이상에서만 지원합니다.
 * 
 * 그러나 상속 방식의 패턴이 만드는 프로토타입 체인의 성능적 저하는 측정 및 검증되지 않았습니다.
 * 
 * 이외에도 성능적 저하의 요소는 더 있습니다.
 * 
 * //!! 성능 저하 요소 1
 * 텍스트는 캔버스를 생성한 후 동적으로 Texture를 만들고 GPU로 매 글자마다
 * 새로운 Texture를 업로드를 하게 됩니다.
 * 
 * 각 글자를 새로운 Texture로 형성해야 하므로 최적화에 좋지 않습니다.
 * 
 * 가장 좋은 방법은 Bitmap Text를 사용하여 미리 업로드된 Texture를 사용하는
 * 방식입니다.
 * 
 * 이렇게 하면 Draw Call이 추가로 들지 않습니다.
 * Bitmap Text는 글꼴 형성에 큰 제한이 있으므로 아직까지 지원하진 않습니다.
 * 
 * 따라서 PC가 아니라면 이 플러그인은 사용하기 부적절합니다.
 * 모바일에서는 사용을 하지 마시기 바랍니다.
 * 
 * //!! 성능 저하 요소 2
 * Draw Call 문제 이외에도, 이 플러그인은 대부분 삼각 함수를 이용하여 
 * 계산을 하고 있습니다.
 * 
 * 삼각 함수는 CPU에 부담을 주며 실제로 성능이 저하될 수 있습니다.
 * 성능 저하 시기는 대화창 페이지가 새로 형성될 때 입니다.
 * 
 * 삼각 함수는 업데이트 이전에 작성된 데이터를 사용하면 좋겠으나,
 * 실시간으로 데이터를 바꿔야 하므로 페이지가 열려있을 땐 매 시간 계산됩니다.
 * 
 * //!! 성능 저하 요소 3
 * 자바스크립트에서는 아직 C# 코루틴 같은 재진입 요소를 사용하기가 까다롭기 때문에,
 * 프레임워크 내에서 한시적으로 오브젝트를 업데이트를 시키는 것이 힘이 듭니다.
 * 
 * 따라서 페이지가 열려있을 때 글자 갯수마다 의미 없는 오브젝트 업데이트 함수가 호출됩니다.
 * 
 * 물론 이를 해결할 방법은 있습니다.
 * 텍스트 묘화가 끝난 후, 하나의 텍스쳐로 업로드를 하거나 
 * Ticker나 Event Listener 등으로 한시적 업데이트를 구현하는 것입니다.
 * 
 * 그러나 이렇게 검증되지 않은 방식에 투자할 시간은 없습니다.
 * 
 * ================================================================
 * Text Codes
 * ================================================================
 * 다음과 같은 텍스트 코드를 사용할 수 있습니다.
 * 
 *  \텍스트효과<효과명>
 *  \TE<TEXT_EFFECT_NAME>
 * 
 * 다음 명령은 부드럽게 상하로 부드럽게 흔들리는 이펙트를 줍니다.
 * 
 * \텍스트효과<pingpong>
 * \TE<pingpong>
 * 
 * 다음 명령은 투명도 증감과 함께 좌우로 살짝 흔들리는 이펙트를 줍니다.
 * 
 * \텍스트효과<slide>
 * \TE<slide>
 * 
 * 글자가 어딘가에서 날라와 제자리를 빠르게 찾아갑니다.
 * 
 * \텍스트효과<high_rot>
 * \TE<high_rot>
 * 
 * 규칙적으로 방향도 전환하면서 제자리를 찾는 효과입니다.
 * 
 * \텍스트효과<normal_rot>
 * \TE<normal_rot>
 * 
 * 불규칙적인 패턴으로 제자리를 찾아갑니다.
 * 
 * \텍스트효과<random_rot>
 * \TE<random_rot>
 * 
 * 이외로 텍스트 효과를 없애고 싶다면 다음과 같습니다.
 * 
 * \텍스트효과<none>
 * \TE<none>
 * 
 * 주의할 점은 텍스트 효과 문자열은 대소문자를 구분한다는 점입니다.
 * 
 * ================================================================
 * Plugin Commmands
 * ================================================================
 * 다음 명령은 부드럽게 상하로 부드럽게 흔들리는 이펙트를 줍니다.
 * 
 * MessageEffectMap pingpong
 * 
 * 다음 명령은 투명도 증감과 함께 좌우로 살짝 흔들리는 이펙트를 줍니다.
 * 
 * MessageEffectMap slide
 * 
 * 글자가 어딘가에서 날라와 제자리를 빠르게 찾아갑니다.
 * 
 * MessageEffectMap high_rot
 * 
 * 규칙적으로 방향도 전환하면서 제자리를 찾는 효과입니다.
 * 
 * MessageEffectMap normal_rot
 * 
 * 불규칙적인 패턴으로 제자리를 찾아갑니다.
 * 
 * MessageEffectMap random_rot
 * 
 * 대소문자를 구분하므로 소문자를 대문자를 적지 않도록 해주세요.
 * 
 */ 
!function(g){var I={};function t(c){if(I[c])return I[c].exports;var C=I[c]={i:c,l:!1,exports:{}};return g[c].call(C.exports,C,C.exports,t),C.l=!0,C.exports}t.m=g,t.c=I,t.d=function(g,I,c){t.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:c})},t.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},t.t=function(g,I){if(1&I&&(g=t(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var c=Object.create(null);if(t.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var C in g)t.d(c,C,function(I){return g[I]}.bind(null,C));return c},t.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return t.d(I,"a",I),I},t.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},t.p="",t(t.s=1)}([function(module,exports){eval('window.Imported = window.Imported || {};\r\nImported.RS_MessageEffects = true;\r\n\r\nwindow.RS = window.RS || {};\r\nwindow.RS.MessageEffects = window.RS.MessageEffects || {};\r\n\r\nvar parameters = $plugins.filter(function (i) {\r\n  return i.description.contains(\'<RS_MessageEffects>\');\r\n});\r\n\r\nparameters = (parameters.length > 0) && parameters[0].parameters;\r\n\r\nRS.MessageEffects.Params = {};\r\n\r\nRS.MessageEffects.Params.defaultTextEffect = parameters["Default Text Effect"] || "none";\r\nRS.MessageEffects.Params.currentEffect = RS.MessageEffects.Params.defaultTextEffect;\r\nRS.MessageEffects.Params.clearFlag = Boolean(parameters["Clear Flag"] === "true");\r\n\r\n//================================================================\r\n// Window_MessageImpl\r\n//================================================================    \r\nclass Window_MessageImpl extends Window_Message {\r\n    constructor() {\r\n        super();\r\n\r\n        this.createMainTextLayer();\r\n        // this.createRenderTexture();\r\n\r\n        this.once("removed", () => {\r\n            this.terminateMainTextLayer();\r\n        });\r\n\r\n    }\r\n\r\n    // createRenderTexture() {\r\n    //     const gl = Graphics._renderer.gl;\r\n    \r\n    //     // Create RenderTexture\r\n    //     this._renderTexture = PIXI.RenderTexture.create(\r\n    //         this.width,\r\n    //         this.height,\r\n    //         PIXI.SCALE_MODES.NEAREST\r\n    //     );\r\n    \r\n    //     // Create RenderTarget\r\n    //     if(Graphics.isWebGL()) {\r\n    //         this._renderTarget = new PIXI.RenderTarget(\r\n    //             gl, \r\n    //             this.width,\r\n    //             this.height,\r\n    //             PIXI.SCALE_MODES.NEAREST\r\n    //         );\r\n    //     } else {\r\n    //         this._renderTarget = new PIXI.CanvasRenderTarget(this.width, this.height);\r\n    //     }\r\n    \r\n    //     // Create Sprite\r\n    //     this._renderSprite = new Sprite();\r\n\r\n    //     this.on("removed", this.destroyRenderTexture, this);\r\n\r\n    //     this._init = true;\r\n\r\n    // }\r\n\r\n    // destroyRenderTexture() {\r\n    //     if( this._renderTexture ) this._renderTexture.destroy({ destroyBase: true });\r\n    //     if( this._renderSprite ) this._renderSprite.destroy({ children: true });\r\n    //     if( this._renderTarget ) this._renderTarget.destroy();\r\n    //     this._renderTexture = null;\r\n    //     this._renderSprite = null;\r\n    //     this._renderTarget = null;     \r\n    // }\r\n\r\n    clearFlags() {\r\n        super.clearFlags();\r\n        if(RS.MessageEffects.Params.clearFlag) {\r\n            RS.MessageEffects.Params.currentEffect = \'none\';\r\n        }\r\n    }\r\n\r\n    // /**\r\n    //  * @param {String} text \r\n    //  * @return {String}\r\n    //  */\r\n    // textProcessing(text) {\r\n    //     text = text.slice(0);\r\n\r\n    //     return text;\r\n    // }\r\n\r\n    // /**\r\n    //  * Get the text size like as RPG Maker VX Ace\r\n    //  * @param {String} text\r\n    //  */\r\n    // getTextSize(text) {\r\n    //     var font = this.contents._makeFontNameText();\r\n    //     var textDiv = document.createElement("div");\r\n        \r\n    //     textDiv.style.position = \'absolute\';\r\n    //     textDiv.style.float = \'left\';\r\n    //     textDiv.style.whiteSpace = \'nowrap\';\r\n    //     textDiv.style.visibility = \'hidden\';\r\n    //     textDiv.style.font = font;\r\n    //     textDiv.innerHTML = text;\r\n\r\n    //     document.body.appendChild(textDiv);\r\n\r\n    //     const rect = new PIXI.Rectangle(\r\n    //         0, \r\n    //         0, \r\n    //         textDiv.clientWidth,\r\n    //         textDiv.clientHeight,\r\n    //     );\r\n\r\n    //     document.body.removeChild(textDiv);\r\n\r\n    //     return rect;\r\n    // }    \r\n\r\n    // /**\r\n    //  * Create a texture.\r\n    //  * @param {MV.TextState} textState \r\n    //  */          \r\n    // createLocalTexture(textState) {\r\n \r\n    //     var temp = textState.text;\r\n    //     var lines = temp.split(/[\\r\\n]+/i);\r\n\r\n    //     var rect = this.getTextSize(temp);\r\n    //     var bitmap = new Bitmap(rect.width, rect.height * lines.length);\r\n        \r\n    //     this.contents.clear();\r\n\r\n    //     // lines.forEach((line,i,a) => {\r\n    //     //     bitmap.drawText(line, 0, i * rect.height, rect.width, rect.height, "left");\r\n    //     // });\r\n\r\n    //     this.drawTextEx(temp, 0, this.height + 6);\r\n\r\n    //     bitmap.blt(this.contents, 0, this.height + 6, bitmap.width, bitmap.height, 0, 0, this.bitmap.width, bitmap.height);\r\n\r\n    //     return bitmap;\r\n\r\n    // }\r\n\r\n    _updateContents() {\r\n        super._updateContents();\r\n\r\n        // if(this._mainTextLayer) {\r\n        //     var padding = this.textPadding();\r\n        //     this._mainTextLayer.x = this.x + padding;\r\n        //     this._mainTextLayer.y = this.y + padding;\r\n        // }\r\n    }\r\n\r\n    createMainTextLayer() {\r\n        var w = this._width - this._padding * 2;\r\n        var h = this._height - this._padding * 2;\r\n\r\n        this._mainTextLayer = new Sprite();\r\n        this._mainTextLayer.setFrame(this.origin.x, this.origin.y, w, h);\r\n        this._mainTextLayer.on("effect", this.startTextEffect, this);\r\n        this._windowContentsSprite.addChild(this._mainTextLayer);\r\n    }\r\n\r\n    terminateMainTextLayer() {\r\n        if(this._mainTextLayer) {\r\n            this._windowContentsSprite.removeChild(this._mainTextLayer);\r\n            this._mainTextLayer = null;\r\n        }\r\n    }\r\n\r\n    terminateMessage() {\r\n        super.terminateMessage();\r\n\r\n        if(this._mainTextLayer) {\r\n            this._mainTextLayer.removeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Array} args\r\n     */\r\n    startTextEffect(args) {\r\n\r\n        /**\r\n         * @type {TextEffect}\r\n         */\r\n        const bitmap = args[0];  \r\n        const effectType = RS.MessageEffects.Params.currentEffect;\r\n        const textState = args[1];\r\n\r\n        if(!bitmap) return;                       \r\n\r\n        let sprite = EffectFactory.create(effectType);\r\n\r\n        sprite.bitmap = bitmap;\r\n             \r\n        this._mainTextLayer.addChild(sprite);       \r\n\r\n        sprite.start(textState);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {MV.TextState} textState \r\n     */\r\n    addText(textState) {\r\n        if(!this.contents) {\r\n            this.createContents();\r\n        }\r\n\r\n        let c = textState.text[textState.index++];\r\n        \r\n        let w = this.textWidth(c);\r\n        let h = textState.height;\r\n\r\n        var bitmap = new Bitmap(w * 2, h);\r\n\r\n        // FontFace를 먼저 설정해야 색깔이 정상적으로 변경됨\r\n        bitmap.fontFace = this.standardFontFace();\r\n\r\n        bitmap.fontSize = this.standardFontSize();\r\n        bitmap.fontItalic = this.contents.fontItalic;\r\n        bitmap.textColor = this.contents.textColor;\r\n        bitmap.outlineColor = this.contents.outlineColor;\r\n        bitmap.outlineWidth = this.contents.outlineWidth;\r\n\r\n        if(this.contents.width < Math.floor(textState.x + w * 2)) {\r\n            return;\r\n        }\r\n\r\n        // 자동 개행, 배경색 설정을 위해서.\r\n        if(Imported.RS_MessageSystem) {\r\n            bitmap.fontBold = this.contents.fontBold;\r\n\r\n            var width = this.contentsWidth();\r\n\r\n            var isValid = ($gameMessage.getBalloon() === -2) && !this._isUsedTextWidthEx && RS.MessageSystem.Params.isParagraphMinifier;\r\n        \r\n            this.processWordWrap(textState, w, width, isValid);\r\n        \r\n            if($gameMessage.faceName() !== "") {\r\n              width = this.contents.width - (Window_Base._faceWidth);\r\n              isValid = (RS.MessageSystem.Params.faceDirection === 2);\r\n              this.processWordWrap(textState, w, width, isValid);\r\n            }\r\n\r\n            if(this.contents.highlightTextColor != null) {\r\n                bitmap.fillRect( 0, 0, w + 1.0, textState.height, this.contents.highlightTextColor);\r\n            }\r\n            \r\n        }\r\n\r\n        bitmap.drawText(c, 0, 0, w * 2 , h, "left");\r\n\r\n        this._mainTextLayer.emit("effect", [\r\n            bitmap,\r\n            textState\r\n        ]);\r\n        \r\n        textState.x += w;\r\n\r\n        if(Imported.RS_MessageSystem) {\r\n            !this._showFast && this.startWait($gameMessage.getWaitTime() || 0);\r\n            if((textState.index % RS.MessageSystem.Params.textSoundInterval) === 0) this._requestTextSound();                \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method obtainTextEffectName\r\n     * @param {MV.TextState} textState \r\n     */\r\n    obtainTextEffectName(textState) {\r\n        var arr = /\\<(.*)\\>/.exec(textState.text.slice(textState.index));\r\n        if (arr) {\r\n            textState.index += arr[0].length;\r\n            return String(arr[1]);\r\n        } else {\r\n            return "";\r\n        }\r\n    }\r\n\r\n    setTextEffect(textEffect) {\r\n        if(typeof(textEffect) === "number") {\r\n            var keys = Object.keys(EffectFactory.TYPE);\r\n            var effects = keys[textEffect];\r\n            if(keys.contains(effects)) {\r\n                textEffect = effects;\r\n            } else {\r\n                textEffect = RS.MessageEffects.Params.defaultTextEffect;\r\n            }\r\n        }\r\n        RS.MessageEffects.Params.currentEffect = textEffect;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} code \r\n     * @param {MV.TextState} textState \r\n     */\r\n    processEscapeCharacter(code, textState) {                          \r\n        switch (code) {\r\n            case \'텍스트효과\':\r\n            case \'TE\': // \\TE<PingPong>\r\n                const textEffectName = this.obtainTextEffectName(textState);\r\n                if(!this._isUsedTextWidthEx) {\r\n                    this.setTextEffect(textEffectName);\r\n                }\r\n                break;\r\n            case \'E\': // \\E[1]\r\n                const effectNum = this.obtainEscapeParam(textState);\r\n                if(!this._isUsedTextWidthEx) {                    \r\n                    this.setTextEffect(effectNum - 1);\r\n                }                \r\n            default:\r\n                super.processEscapeCharacter(code, textState);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {MV.TextState} textState \r\n     */        \r\n    processNormalCharacter(textState) {\r\n        if(RS.MessageEffects.Params.currentEffect !== "none") {\r\n            this.addText(textState);\r\n        } else {\r\n            super.processNormalCharacter(textState);\r\n        }\r\n    }\r\n\r\n    startPause() {\r\n        super.startPause();\r\n        // this._mainTextLayer.children.forEach(i => i.flush());\r\n    }\r\n\r\n\r\n    // renderCanvas(renderer) {\r\n    //     if (!this.visible || !this.renderable) {\r\n    //         return;\r\n    //     }\r\n    \r\n    //     var layers = this.children;\r\n    //     for (var i = 0; i < layers.length; i++)\r\n    //         layers[i].renderCanvas(renderer);\r\n    \r\n    //     if(this._mainTextLayer && this._mainTextLayer.parent !== this) {\r\n    //       this._mainTextLayer.setParent(this);\r\n    //     }\r\n    \r\n    //     for (var i = 0; i <this._mainTextLayer.children.length; i++ ) {\r\n    //       var child = this._mainTextLayer.children[i];\r\n    //       if(child) renderer.plugins.sprite.render(child);\r\n    //     }\r\n        \r\n    // }\r\n\r\n    // /**\r\n    //  * \r\n    //  * @param {PIXI.WebGLRenderer} renderer \r\n    //  */\r\n    // renderWebGL(renderer) {\r\n\r\n    //     if(!this.visible || !this.renderable) {\r\n    //         return;\r\n    //     }     \r\n    \r\n    //     renderer.bindRenderTexture(this._renderTexture);\r\n\r\n    //     for(var i = 0; i < this.children.length; ++i) {\r\n    //         var child = this.children[i];\r\n    //         if(child.visible) renderer.render(child, this._renderTexture);\r\n    //     }\r\n    \r\n    //     if(this._mainTextLayer.visible) renderer.render(this._mainTextLayer, this._renderTexture);\r\n    \r\n    //     renderer.bindRenderTarget(this._renderTarget);\r\n\r\n    // }    \r\n\r\n\r\n}\r\n\r\nwindow.Window_Message = Window_MessageImpl;\r\n\r\nvar alias_Game_Interpreter_pluginCommand = Game_Interpreter.prototype.pluginCommand;\r\nGame_Interpreter.prototype.pluginCommand = function(command, args) {\r\n    alias_Game_Interpreter_pluginCommand.call(this, command, args);\r\n    if(command === "MessageEffectMap") {\r\n        RS.MessageEffects.Params.currentEffect = args[0];\r\n    }\r\n};                 //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./lib/RS_MessageEffects/core.js\nvar core = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./lib/RS_MessageEffects/TextEffect.js\n//================================================================\r\n// TextEffect\r\n//================================================================\r\nclass TextEffect extends Sprite {\r\n    constructor(bitmap) {\r\n        super(bitmap);\r\n        this._isStarted = false;\r\n        this._effectType = "pingpong";\r\n\r\n        if(Graphics.isWebGL()) {\r\n            this.filters = [Sprite.voidFilter];\r\n        }        \r\n    }\r\n\r\n    update() {\r\n        super.update();\r\n        this.updateEffects();\r\n    }\r\n\r\n    /**\r\n     * 종료\r\n     */\r\n    flush() {\r\n        this._isStarted = false;\r\n        this.x = this._startX;\r\n        this.y = this._startY;\r\n        this.rotation = this._desc.rotation;\r\n        this.scale.x = this._desc.scaleX;\r\n        this.scale.y = this._desc.scaleY;\r\n        this.skew.x = this._desc.skewX;\r\n        this.skew.y = this._desc.skewY;\r\n        this.tint = this._desc.tint;\r\n        this.filters = this._desc.filters;\r\n        this.opacity = this._tempOpacity;\r\n        this._desc = {};\r\n    }\r\n\r\n    updateEffects() {\r\n    }\r\n\r\n    /**\r\n     * 시작\r\n     * @param {MV.TextState} textState\r\n     */\r\n    start(textState) {\r\n        this._now = performance.now();\r\n        this._isStarted = true;       \r\n        this._power = 1;   \r\n        this.x = textState.x;\r\n        this.y = textState.y;\r\n        this._startX = this.x;\r\n        this._startY = this.y;\r\n        this._random = Math.floor(Math.random() * 60);\r\n        this._index = textState.index;\r\n        this._tempOpacity = this.opacity;\r\n\r\n        this._desc = {\r\n            x: this.x,\r\n            y: this.y,\r\n            rotation: this.rotation,    \r\n            scaleX: this.scale.x || 1.0,\r\n            scaleY: this.scale.y || 1.0,\r\n            skewX :this.skew.x || 0.0,\r\n            skewY :this.skew.y || 0.0,\r\n            opacity: this.opacity,\r\n            tint: this.tint,\r\n            filters: this.filters,\r\n        };\r\n        \r\n\r\n    };\r\n}\r\n\r\nclass EffectFactory {\r\n    static create(effectType) {\r\n        \r\n        let sprite;\r\n\r\n        var keys = Object.keys(EffectFactory.TYPE);\r\n\r\n        if(keys.contains(effectType)) {\r\n            var ET_CLASS = EffectFactory.TYPE[effectType];\r\n            sprite = new ET_CLASS();\r\n        } else {\r\n            sprite = new TextEffect();\r\n        }\r\n\r\n        return sprite;\r\n\r\n    }\r\n\r\n    static add(values) {\r\n        Object.assign( EffectFactory.TYPE, values );\r\n    }\r\n\r\n}\r\n\r\nif(!EffectFactory.TYPE) {\r\n\r\n    EffectFactory.TYPE = {\r\n    };\r\n\r\n    window.EffectFactory = EffectFactory;\r\n\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./lib/RS_MessageEffects/EffectsPack1.js\n\r\n\r\nconst DEG_TO_RAD  = (Math.PI / 180.0);\r\n\r\nclass EffectsPack1_PingPong extends TextEffect {\r\n    \r\n  constructor(bitmap) {\r\n      super(bitmap);\r\n      this._effectType = "pingpong";\r\n  }\r\n\r\n  updateEffects() {\r\n      if(!this._isStarted) return;            \r\n      if(this._power <= 60) {\r\n          this.y = this._startY + (PIXI.PI_2 / this._power) * 4.0;\r\n          this._power++;\r\n      } else {\r\n          this.flush();\r\n      }\r\n  }\r\n}    \r\n\r\nclass EffectsPack1_Slide extends TextEffect {\r\n  \r\n  constructor(bitmap) {\r\n    super(bitmap);\r\n    this._effectType = "slide";\r\n  }\r\n  \r\n  updateEffects() {\r\n    if(!this._isStarted) return;            \r\n    if(this._power <= 60) {\r\n      this.x = this._startX + (PIXI.PI_2 / this._power) * (this._index % 4) * 4;\r\n      this.opacity = 4 * this._power;\r\n      this._power++;\r\n    } else {\r\n      this.flush();\r\n    }\r\n  }\r\n}        \r\n\r\nclass EffectsPack1_HighRotation extends TextEffect {\r\n  \r\n  constructor(bitmap) {\r\n    super(bitmap);\r\n    this._effectType = "high_rot";\r\n  }\r\n  \r\n  updateEffects() {\r\n    if(!this._isStarted) return;            \r\n    if(this._power <= this._random) {\r\n      let dist = this._random - this._power;\r\n      let tm = performance.now();\r\n      let r = DEG_TO_RAD * dist * (this._random % 2 == 0 ? -tm : tm);\r\n      let c = Math.cos(r);\r\n      let s = Math.sin(r);\r\n      let tx = this._startX - dist;\r\n      let ty = this._startY - dist;\r\n      this.x = tx * c - ty * s;\r\n      this.y = tx * s + ty * c;\r\n      this._power++;\r\n    } else {\r\n      this.flush();\r\n    }\r\n  }\r\n}            \r\n\r\nclass EffectsPack1_NormalRotation extends TextEffect {\r\n  \r\n  constructor(bitmap) {\r\n    super(bitmap);\r\n    this._effectType = "normal_rot";\r\n  }\r\n  \r\n  updateEffects() {\r\n    if(!this._isStarted) return;            \r\n    if(this._power <= this._random) {\r\n      let dist = this._random - this._power;\r\n      let tm = performance.now();\r\n      let r = DEG_TO_RAD * dist * (this._index % 3 == 0 ? -1 : 1);\r\n      let c = Math.cos(r);\r\n      let s = Math.sin(r);\r\n      let tx = (this._startX - dist);\r\n      let ty = this._startY - dist;\r\n      this.x = tx * c - ty * s;\r\n      this.y = tx * s + ty * c;\r\n      this._power++;\r\n    } else {\r\n      this.flush();\r\n    }\r\n  }\r\n}       \r\n\r\nclass EffectsPack1_RandomRotation extends TextEffect {\r\n  \r\n  constructor(bitmap) {\r\n    super(bitmap);\r\n    this._effectType = "random_rot";\r\n  }\r\n  \r\n  updateEffects() {\r\n    if(!this._isStarted) return;            \r\n    if(this._power <= this._random) {\r\n      let dist = this._random - this._power;\r\n      let r = DEG_TO_RAD * dist * (this._random % 2 == 0 ? -1 : 1);\r\n      let c = Math.cos(r);\r\n      let s = Math.sin(r);\r\n      let tx = this._startX - dist;\r\n      let ty = this._startY - dist;\r\n      this.x = tx * c - ty * s;\r\n      this.y = tx * s + ty * c;\r\n      this._power++;\r\n    } else {\r\n      this.flush();\r\n    }\r\n  }\r\n}         \r\n\r\nclass EffectsPack1_Shock extends TextEffect {\r\n  constructor(bitmap) {\r\n    super(bitmap);\r\n    \r\n    this._effectType = "shock";\r\n  }\r\n  \r\n  flush() {\r\n    super.flush();\r\n    this.rotation = 0.0;\r\n    this.anchor.x = 0.0;\r\n    this.anchor.y = 0.0;\r\n  }\r\n  \r\n  updateEffects() {\r\n    if(!this._isStarted) return;      \r\n    if(this._power <= 60) {\r\n      this.anchor.x = -0.8 + Math.random();\r\n      this.anchor.y = -0.8 + Math.random();                \r\n    } else {\r\n      this.flush();\r\n    }\r\n  }\r\n  \r\n  start(textState) {\r\n    super.start(textState);\r\n  }\r\n  \r\n}    \r\n\r\nEffectFactory.add({\r\n  \'pingpong\': EffectsPack1_PingPong,  \r\n  \'slide\': EffectsPack1_Slide,\r\n  \'high_rot\': EffectsPack1_HighRotation,\r\n  \'normal_rot\': EffectsPack1_NormalRotation,\r\n  \'random_rot\': EffectsPack1_RandomRotation,\r\n  \'shock\': EffectsPack1_Shock,    \r\n});\n// CONCATENATED MODULE: ./lib/RS_MessageEffects/EffectsPack2.js\n\r\n\r\nclass EffectsPack2_ZoomOut extends TextEffect {\r\n    \r\n    constructor(bitmap) {\r\n        super(bitmap);\r\n        \r\n        this._effectType = "zoomout";\r\n    }    \r\n\r\n    updateEffects() {\r\n        if(!this._isStarted) return;\r\n        this.scale.x = (200.0 - this._power) / 100.0;\r\n        this.scale.y = (200.0 - this._power) / 100.0;\r\n        \r\n        if((this.scale.x + 0.0001) <= 1.0) {\r\n            this.flush();\r\n        }\r\n\r\n        this._power++;\r\n    }   \r\n    \r\n    start(textState) {\r\n        super.start(textState);\r\n        this.scale.x = 1.5;\r\n        this.scale.y = 1.5;\r\n    }    \r\n}\r\n\r\nclass EffectsPack2_Marquee extends TextEffect {\r\n    constructor(bitmap) {\r\n        super(bitmap);\r\n        \r\n        this._effectType = "marquee";\r\n    }    \r\n\r\n    updateEffects() {\r\n        if(!this._isStarted) return;\r\n\r\n        this._ox -= 4;\r\n\r\n        this.x = this._startX + this._ox;\r\n\r\n        if(this._ox < 0) {\r\n            this.flush();\r\n        }\r\n    }   \r\n    \r\n    /**\r\n     * \r\n     * @param {MV.TextState} textState \r\n     */\r\n    start(textState) {\r\n        super.start(textState);\r\n\r\n        let width = 0;\r\n        let scene = SceneManager._scene;\r\n        if(scene && scene._messageWindow) {\r\n            width = scene._messageWindow.width;\r\n        } else {\r\n            width = Math.floor(Graphics.boxWidth / 2);\r\n        }\r\n            \r\n        this._ox = width;\r\n        this.x += width;\r\n\r\n    }    \r\n}\r\n\r\nclass EffectsPack2_Wave extends TextEffect {\r\n    constructor(bitmap) {\r\n        super(bitmap);\r\n        \r\n        this._effectType = "wave";\r\n    }    \r\n\r\n    updateEffects() {\r\n        if(!this._isStarted) return;\r\n        this.skew.x = 60.0 * Math.max(this._startX % 5, 1);\r\n        this.skew.y = Math.random() * 2.0 * this._index;\r\n        if(this._power >= 60) {\r\n            this.flush();\r\n        }\r\n        this._power++;\r\n    }   \r\n    \r\n    start(textState) {\r\n        super.start(textState);\r\n    }    \r\n}\r\n\r\nclass EffectsPack2_Spread extends TextEffect {\r\n    constructor(bitmap) {\r\n        super(bitmap);\r\n        \r\n        this._effectType = "spread";\r\n    }    \r\n\r\n    updateEffects() {\r\n        if(!this._isStarted) return;\r\n        if(!(performance.now() - this._lazy) >= 1500) return;\r\n        switch(this._index) {\r\n            case 3:\r\n                this.x = this._startX - this._power;\r\n                break;\r\n            case 1:\r\n                this.x = this._startX + this._power;\r\n                break;\r\n            case 0:\r\n                this.y = this._startY - this._power;\r\n                break;\r\n            case 2:\r\n                this.y = this._startY + this._power;\r\n                break;\r\n        }\r\n\r\n        if(this._power >= 600) {\r\n            this.flush();\r\n        }\r\n\r\n    }   \r\n    \r\n    /**\r\n     * \r\n     * @param {MV.TextState} textState \r\n     */\r\n    start(textState) {\r\n        super.start(textState);\r\n        this._lazy = performance.now();\r\n        this._index = textState.index % 4;\r\n    }    \r\n}\r\n\r\nclass EffectsPack2_MouseTracking extends TextEffect {\r\n    constructor(bitmap) {\r\n        super(bitmap);\r\n        \r\n        this._effectType = "mouse_tracking";\r\n    }\r\n\r\n    getDistance(x1, y1, x2, y2) {\r\n        return Math.sqrt( Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) );\r\n    }\r\n\r\n    updateEffects() {\r\n        if(!this._isStarted) return;\r\n\r\n        let moveSpeed = this._dist / 30.0;\r\n\r\n        let x1 = this._startX - this.x;\r\n        let y1 = this._startY - this.y;\r\n        let xDist = 0;\r\n        let yDist = 0;\r\n\r\n        if(x1 < 0) {\r\n            xDist = moveSpeed;\r\n        } else if(x1 > 0) {\r\n            xDist = -moveSpeed;\r\n        } else {\r\n            xDist = 0;\r\n        }\r\n\r\n        if(y1 < 0) {\r\n            yDist = moveSpeed;\r\n        } else if(y1 > 0) {\r\n            yDist = -moveSpeed;\r\n        } else {\r\n            yDist = 0;\r\n        }\r\n\r\n        let tx = this.x - xDist;\r\n        let ty = this.y - yDist;\r\n\r\n        this.x = tx;\r\n        this.y = ty;\r\n\r\n        let dist = Math.floor(this.getDistance(this._startX, this._startY, TouchInput.x, TouchInput.y));\r\n        if(dist < 16) {\r\n            this.flush();\r\n        }\r\n\r\n    }   \r\n    \r\n    start(textState) {\r\n        super.start(textState);\r\n        this.x = TouchInput.x;\r\n        this.y = TouchInput.y;\r\n        this._dist = Math.floor(this.getDistance(this._startX, this._startY, TouchInput.x, TouchInput.y));\r\n    }\r\n}\r\n\r\nEffectFactory.add({\r\n    "zoomout": EffectsPack2_ZoomOut,\r\n    "marquee": EffectsPack2_Marquee,\r\n    "wave": EffectsPack2_Wave,\r\n    "zoomout": EffectsPack2_ZoomOut,\r\n    "spread": EffectsPack2_Spread,\r\n    "mouse_tracking": EffectsPack2_MouseTracking,\r\n});\n// CONCATENATED MODULE: ./lib/RS_MessageEffects/index.js\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEciLCJmaWxlIjoiUlNfTWVzc2FnZUVmZmVjdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iXSwic291cmNlUm9vdCI6IiJ9